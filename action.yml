# Expecting repo to already be checked out
name: "actions.dbd.be.dockerbuild"
description: "Builds the base image for all dbd back-end services for"
inputs:
  dbd_stage:
    description: "Eg. stage22. If unset will be considered 'none'"
    required: false
  gar_key:
    required: true
  build_context:
    description: "Docker build context, relative to the github working dir (root of the repo)"
    required: false
    default: "."
  registry:
    description: "Ex. us-docker.pkg.dev"
    required: false
    default: "us-docker.pkg.dev"
  repo_name:
    description: "Container repo name. If unset, will be the same as $dbd_stage"
    required: false
  gcp_project:
    required: false
    default: "dragon-blood-dungeon"
  image_name:
    description: "GitHub repo's name by default"
    required: false

outputs:
  project: 
    description: "The project id parsed from the key file. Might be removed as it's not needed anymore in the internal implementation"
    value: ${{ steps.parser_unix.outputs.project_id }}${{ steps.parser_win.outputs.project_id }}
  # email: 
  #   description: "The email of the service account parsed from the key file"
  #   value: ${{ steps.parser.outputs.project_id }}
    
runs:
  using: "composite"
  steps:  
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        buildkitd-flags: --debug
        
    - name: Login to GAR
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.registry }}
        username: _json_key
        password: ${{ inputs.gar_key }}  

    - name: Validate inputs and Get docker repo url
      shell: bash
      run: |
        dbd_stage=${{ inputs.dbd_stage }}
        if [ -z "$dbd_stage" ]; then
          dbd_stage='none'
          echo "dbd_stage is unset. Setting to '$dbd_stage'"
        fi
        echo "Setting DBD_STAGE to $repo"
        echo "DBD_STAGE=$dbd_stage" >> $GITHUB_ENV

        repo_name=${{ inputs.repo_name }}
        if [ -z "$repo_name" ]; then
          repo_name=$dbd_stage
        fi
        repo_url="${{ inputs.registry }}/${{ inputs.gcp_project }}/$repo_name"
        echo "Setting docker repo url to $repo_url"
        echo "DOCKER_REPO_URL=$repo_url" >> $GITHUB_ENV

    - name: Get image name and url
      shell: bash
      run: |
        image_name=${{ inputs.image_name }}
        if [ -z "$image_name" ]; then
          image_name=${{ github.event.repository.name }}
        fi
        echo Setting image name to "$image_name"
        echo "IMAGE_NAME=$image_name" >> $GITHUB_ENV
        echo "IMAGE_URL=$DOCKER_REPO_URL/$image_name" >> $GITHUB_ENV

    - name: Get component name
      shell: bash
      run: |
        n="${{ env.IMAGE_NAME }}"
        n=$(echo "$n" | sed "s/dbd\.docker\.be\.//")
        echo "DBD_COMPONENT=$n" >> $GITHUB_ENV

    # As per https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
    # Important: make sure to not tag an image with no registry, as the push will fail
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ env.IMAGE_URL }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          latest

    - name: Compose cache key
      shell: bash
      run: |
        cache_key=${{ runner.os }}-buildx-${{ github.sha }}-"$(env | md5sum)"-${{ hashFiles(format('{0}/**', inputs.build_context))}}
        echo "BDX_CACHE_KEY=$cache_key" >> $GITHUB_ENV

    # See C1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ env.BDX_CACHE_KEY }}-
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.build_context }}
        # Commented: only amd64 (desktop) is needed for now, as we only run on this architecture
        # platforms: linux/amd64,linux/arm64
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # See C1
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        build-args: |
          DBD_PROJECT_ID=${{ inputs.gcp_project }}
          DBD_DOCKER_REGISTRY=${{ inputs.registry }}
          DOCKER_REPO_URL=${{ env.DOCKER_REPO_URL }}
          DBD_STAGE=${{ env.DBD_STAGE }}
          DBD_COMPONENT=${{ env.DBD_COMPONENT }}

    # See C1
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      if: always()
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache


# Ref C1
## Caching layers as per https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
