# Expecting repo to already be checked out
# Some docker build documentation here, with examples: https://docs.docker.com/build/ci/github-actions/examples/
name: "actions.dbd.be.dockerbuild"
description: "Builds the base image for dbd back-end services"
inputs:
  dbd_stage:
    description: "Eg. stage22. If unset will be considered 'none'"
    required: false
  gar_key_base64:
    required: false
    default: ''
    description: ''
  build_context:
    description: "Docker build context, relative to the github working dir (root of the repo)"
    required: false
    default: "."
  load:
    description: "Whether make the image available to Docker (for ex., to reference it later through docker or for next build steps)"
    required: false
    default: 'false'
  push:
    description: "Whether to push the image or not"
    required: true
    default: 'true'
  registry:
    description: "Ex. us-docker.pkg.dev"
    required: false
    default: ''
  repo_name:
    description: "Container repo name. If unset, will be the same as $dbd_stage"
    required: false
  gcp_project:
    required: false
    default: "dragon-blood-dungeon"
    description: ''
  image_name:
    description: "GitHub repo's name by default"
    required: false
  main_component:
    description: "Name of the main component. Ex. 'database-proxy'"
    required: false
    default: ''
  main_component_artifact:
    description: "Name of the main artifact file in the image, if it exists. Ex. ConsoleGameSrv.zip"
    required: false
    default: ''
  cache_storage:
    description: "local or registry"
    required: false
    default: ''
  builder_commit:
    description: "SHA of the builder commit, taken via github.sha. DBD_BUILDER_COMMIT arg will be passed with value <builder_commit> to the builder, as well as DBD_BUILDER_COMMIT_IMAGE_TAG with value 'buildersha-<builder_commit>', which will be one of the image's tags"
    required: true
  __use_buildx:
    required: true
    default: 'true'
    description: ''

outputs:
  project: 
    description: "The project id parsed from the key file. Might be removed as it's not needed anymore in the internal implementation"
    value: ${{ steps.parser_unix.outputs.project_id }}${{ steps.parser_win.outputs.project_id }}
  # email: 
  #   description: "The email of the service account parsed from the key file"
  #   value: ${{ steps.parser.outputs.project_id }}
    
runs:
  using: "composite"
  steps:  
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      
    # As per https://github.com/docker/build-push-action/issues/738#issuecomment-1337538278
    # # - name: Set up Docker Buildx
    # #   uses: docker/setup-buildx-action@v1
    # #   with:
    # #     buildkitd-flags: --debug
      
    - name: Set up Docker Buildx if enabled
      # v2.2.1 as of 03.12.2022
      uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325
      if: inputs.__use_buildx == 'true'
      with:
        buildkitd-flags: --debug
        
    - name: Login to GAR if gar_key_base64 provided
      uses: docker/login-action@v1
      if: inputs.registry != '' && inputs.gar_key_base64 != ''
      with:
        registry: ${{ inputs.registry }}
        username: _json_key_base64
        password: ${{ inputs.gar_key_base64 }}  

    - name: Set DBD_STAGE
      shell: bash
      run: |
        dbd_stage=${{ inputs.dbd_stage }}
        if [ -z "$dbd_stage" ]; then
          dbd_stage='none'
          echo "dbd_stage is unset. Setting to '$dbd_stage'"
        fi
        echo "Setting DBD_STAGE to $repo"
        echo "DBD_STAGE=$dbd_stage" >> $GITHUB_ENV

    - name: Construct image name and url
      shell: bash
      id: image_info
      run: |
        registry='${{ inputs.registry }}'
        image_name=${{ inputs.image_name }}
        if [ -z "$image_name" ]; then
          if [ -z "$registry" ]; then
            echo "Must specify image_name if registry was not specified" 2>&1
            exit 29
          fi

          image_name=${{ github.event.repository.name }}
        fi
        echo Setting image name to "$image_name"
        echo "name=$image_name" >> $GITHUB_OUTPUT

        if [ -n "$registry" ]; then
          repo_name=${{ inputs.repo_name }}
          if [ -z "$repo_name" ]; then
            repo_name=$DBD_STAGE
            echo "repo_name is not set => set to $repo_name"
          fi

          repo_url="$registry/${{ inputs.gcp_project }}/$repo_name"
          image_fullname="$repo_url/$image_name"
          echo "registry is set => set image_fullname to $image_fullname"
        else
          image_fullname="$image_name"
          echo "registry is not => set image_fullname to $image_fullname"
        fi

        echo "image_fullname=$image_fullname" >> $GITHUB_OUTPUT

    # Update: knew too much. component name should be passed
    # - name: Get component name
    #   shell: bash
    #   id: comp_name
    #   run: |
    #     n="${{ steps.image_info.outputs.name }}"
    #     # Cut everything before- and including 'dbd.docker.be'. Ex: 'dslocal/dbd.docker.be.comp' => 'comp'
    #     n=$(echo "$n" | sed "s/.*dbd\.docker\.be\.//")
    #     echo "value=$n" >> $GITHUB_OUTPUT

    - name: Create image builder commit tag
      shell: bash
      id: image_commit_tag
      run: echo "value=buildersha-${{ inputs.builder_commit }}" >> $GITHUB_OUTPUT

    # Commented SHA not available for some reason in composite actions
    # - name: "Construct buildersha-... for source workflow's repo"
    #   shell: bash
    #   id: buildersha
    #   run: |
    #     # echo "value=buildersha-${{ env.GITHUB_SHA }}" >> $GITHUB_OUTPUT
    #     echo "value=buildersha-${{ github.sha }}" >> $GITHUB_OUTPUT

    # As per https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
    # Important: make sure to not tag an image with no registry, as the push will fail
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4.1.1
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ steps.image_info.outputs.image_fullname }}
        # generate Docker tags based on the following events/attributes
        # tags: |
        #   type=schedule
        #   type=semver,pattern={{version}}
        #   type=semver,pattern={{major}}.{{minor}}
        #   type=semver,pattern={{major}}
        #   type=sha
        #   latest
        #   ${{ steps.outputs.buildersha.value }}
        tags: |
          type=schedule
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          latest
          ${{ steps.image_commit_tag.outputs.value }}

    - name: Compose cache key if buildx enabled
      if: inputs.__use_buildx == 'true'
      shell: bash
      run: |
        cache_key=${{ runner.os }}-buildx-${{ github.sha }}-"$(env | md5sum)"-${{ hashFiles(format('{0}/**', inputs.build_context))}}
        echo "BDX_CACHE_KEY=$cache_key" >> $GITHUB_ENV

    # See C1
    - name: Set cache type if buildx enabled
      if: inputs.__use_buildx == 'true'
      shell: bash
      run: |
        if [ "${{ inputs.cache_storage }}" == "registry" ]; then
          value_from="type=registry,ref=${{ steps.image_info.outputs.image_fullname }}:buildcache"
          echo "BDX_CACHE_FROM=$value_from" >> $GITHUB_ENV
          echo "BDX_CACHE_TO=$value_from,mode=max" >> $GITHUB_ENV
        else
          echo "BDX_CACHE_FROM=type=local,src=/tmp/.buildx-cache" >> $GITHUB_ENV
          echo "BDX_CACHE_TO=type=local,dest=/tmp/.buildx-cache-new,mode=max" >> $GITHUB_ENV
        fi

    # See C1
    - name: Init docker layers cache locally if requested and if buildx enabled
      uses: actions/cache@v2
      if: inputs.cache_storage != 'registry' && inputs.__use_buildx == 'true'
      with:
        path: /tmp/.buildx-cache
        key: ${{ env.BDX_CACHE_KEY }}-
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push
      uses: docker/build-push-action@v3.2.0
      with:
        context: ${{ inputs.build_context }}
        # Commented: only amd64 (desktop) is needed for now, as we only run on this architecture
        # platforms: linux/amd64,linux/arm64
        platforms: linux/amd64
        push: ${{ inputs.push == 'true' }}
        load: ${{ inputs.load == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

        # Will be empty if buildx disabled
        cache-from: ${{ env.BDX_CACHE_FROM }}
        cache-to: ${{ env.BDX_CACHE_TO }}

        # outputs: type=docker
        # no-cache: true
        # build-args: |
        #   DBD_PROJECT_ID=${{ inputs.gcp_project }}
        #   DBD_DOCKER_REGISTRY=${{ inputs.registry }}
        #   DOCKER_REPO_URL=${{ env.DOCKER_REPO_URL }}
        #   DBD_STAGE=${{ env.DBD_STAGE }}
        #   DBD_COMPONENT=${{ env.DBD_COMPONENT }}
        #   DBD_BUILDER_COMMIT=${{ steps.outputs.buildersha.value }}
        # build-args: |
        #   DBD_PROJECT_ID=${{ inputs.gcp_project }}
        #   DBD_DOCKER_REGISTRY=${{ inputs.registry }}
        #   DOCKER_REPO_URL=${{ env.DOCKER_REPO_URL }}
        #   DBD_STAGE=${{ env.DBD_STAGE }}
        #   DBD_COMPONENT=${{ steps.comp_name.outputs.value }}
        #   DBD_COMPONENT=${{ inputs.main_component }}
        #   DBD_COMPONENT_ARTIFACT=${{ inputs.main_component_artifact }}
        #   DBD_BUILDER_COMMIT=${{ inputs.builder_commit }}
        #   DBD_BUILDER_COMMIT_IMAGE_TAG=${{ steps.image_commit_tag.outputs.value }}
        # build-args: |
        #   DBD_PROJECT_ID=${{ inputs.gcp_project }}
        #   DBD_STAGE=${{ env.DBD_STAGE }}
        #   DBD_COMPONENT=${{ steps.comp_name.outputs.value }}
        #   DBD_COMPONENT=${{ inputs.main_component }}
        #   DBD_COMPONENT_ARTIFACT=${{ inputs.main_component_artifact }}
        #   DBD_BUILDER_COMMIT=${{ inputs.builder_commit }}
        #   DBD_BUILDER_COMMIT_IMAGE_TAG=${{ steps.image_commit_tag.outputs.value }}
        build-args: |
          DBD_PROJECT_ID=${{ inputs.gcp_project }}
          DBD_STAGE=${{ env.DBD_STAGE }}
          DBD_COMPONENT=${{ inputs.main_component }}
          DBD_COMPONENT_ARTIFACT=${{ inputs.main_component_artifact }}
          DBD_BUILDER_COMMIT=${{ inputs.builder_commit }}
          DBD_BUILDER_COMMIT_IMAGE_TAG=${{ steps.image_commit_tag.outputs.value }}

    # See C1
    # Temp fix
    # LL: also added checks, in case we're not using caching
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move docker layers cache locally if requested
      if: always() && inputs.cache_storage != 'registry'
      shell: bash
      run: |
        if [ -d /tmp/.buildx-cache ]; then
          rm -rf /tmp/.buildx-cache
        fi
        if [ -d /tmp/.buildx-cache-new ]; then
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        fi


# Ref C1
## Caching layers as per https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
